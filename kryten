#!/bin/bash

# Check for root privs
if [ "$(id -u)" -ne 0 ]; then
    echo "Error: kryten requires sudo privileges" >&2
    exit 1
fi

showBanner(){
    kryten_funnies=(
        "Well spin my nipple nuts and send me to Alaska."
        "I'm almost Annoyed!"
        "No Silicon Heaven? But where would all the calculators go?"
        "With respect sir, you think Jesus was a hippie."
        "Sir, are you absolutely sure? It does mean changing the bulb."
        )

    getRandomPhrase(){
        local num_phrases=${#kryten_funnies[@]}
        local random_index=$((RANDOM % num_phrases))
        echo "${kryten_funnies[$random_index]}"
    }

    local random_funny=$(getRandomPhrase)
    clear
    echo -e "\033[38;5;105m"
    echo "   ▄█   ▄█▄    ▄████████ ▄██   ▄       ███        ▄████████ ███▄▄▄▄   "
    echo "  ███ ▄███▀   ███    ███ ███   ██▄ ▀█████████▄   ███    ███ ███▀▀▀██▄ "
    echo "  ███▐██▀     ███    ███ ███▄▄▄███    ▀███▀▀██   ███    █▀  ███   ███ "
    echo " ▄█████▀     ▄███▄▄▄▄██▀ ▀▀▀▀▀▀███     ███   ▀  ▄███▄▄▄     ███   ███ "
    echo "▀▀█████▄    ▀▀███▀▀▀▀▀   ▄██   ███     ███     ▀▀███▀▀▀     ███   ███ "
    echo "  ███▐██▄   ▀███████████ ███   ███     ███       ███    █▄  ███   ███ "
    echo "  ███ ▀███▄   ███    ███ ███   ███     ███       ███    ███ ███   ███ "
    echo "  ███   ▀█▀   ███    ███  ▀█████▀     ▄████▀     ██████████  ▀█   █▀  "
    echo "  ▀           ███    ███                                               "
    echo "      ${random_funny}"
    echo -e "\033[0m========================================================="
    echo -e "\033[0m========================================================="
    echo -e "\033[38;5;31m        Created by \033[1;38;5;32mJoshGreenTech\033[0m"
    echo -e "\033[38;5;31m        https://github.com/joshgreen95\033[0m"
    echo -e "\033[0m========================================================="
    echo -e "\033[0m========================================================="
    echo -e "\033[38;5;105mKryten is online:\033[0m"
    echo -e "\033[38;5;31m   ${engagement_name}\033[0m"
    echo ""
    echo -e "\033[38;5;105mTo access the container shell, run in another window:\033[0m"
    echo -e "\033[1;38;5;31m   kryshell ${engagement_name}\033[0m"
    echo ""
    echo -e "\033[38;5;196mPress 'q' then Enter to stop exit\033[0m"
}

checkRunningContainer() {
    local engagement_name="$1"
    local container_name="kryten-${engagement_name}"
    
    # Check if container exists and is running
    if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
        echo -e "\033[31mError: A kryten container named '${container_name}' is already running\033[0m" >&2
        echo -e "\033[33mYou can access it with: kryshell ${engagement_name}\033[0m" >&2
        echo -e "\033[33mOr stop it with: docker stop ${container_name}\033[0m" >&2
        exit 1
    fi
    
    # Check if container exists but is stopped
    if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
        echo -e "\033[33mWarning: A stopped kryten container named '${container_name}' exists\033[0m" >&2
        read -p "Do you want to remove it and continue? (y/N) " answer
        if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
            exit 1
        fi
        docker rm "$container_name" >/dev/null
    fi
}

kryten () {
    # Vars
    local engagement_name="${1:-default_engagement}"
    engagement_name=$(echo "$engagement_name" | sed 's/[^a-zA-Z0-9.-]/_/g')
    local user_home="/home/$SUDO_USER"
    local ctf_dir="$user_home/CTF/"
    local pentesting_dir="$user_home/Pentesting"
    local URM_dir="$user_home/URM"
    local output_dir="${URM_dir}/${engagement_name}"
    local zip_file="${URM_dir}/archive/${engagement_name}.zip"

    checkRunningContainer "$engagement_name"

    # unzip if archive exists 
    if [ -f "$zip_file" ] && [ ! -d "$output_dir" ]; then
        echo "[+] Unzipping existing engagement: $zip_file"
        unzip -q "$zip_file" -d "${URM_dir}/${engagement_name}" || echo "[!] Unzip failed"
    fi

    mkdir -p "$output_dir"
    
    # Start the container in detached mode --rm flag makes it ephemeral
    docker run -itd --rm \
        --name "kryten-${engagement_name}" \
        --network host \
        --cap-add=NET_ADMIN \
        --cap-add=NET_RAW \
        -v "${pentesting_dir}:/root/pentesting" \
        -v "${output_dir}:/root/${engagement_name}" \
        -v "${HOME}/.zshrc:/root/.zshrc" \
        kryten  # Changed this to explicitly use :latest tag
        # Uncomment for CTF mode:
        # -v "${ctf_dir}:/root/ctf" \
    
    showBanner
    
    # Wait for kill command
    while true; do
        read -n1 -s key
        if [[ $key == 'q' ]]; then
            echo -e "Stopping container...\033[0m"
            docker stop "kryten-${engagement_name}" >/dev/null
            break
        fi
    done

    # Check directory contents and zip
    echo "[+] Preparing to clean up engagement files..."
    if [ -z "$(ls -A "$output_dir")" ]; then
        echo "[?] Engagement directory is empty"
    else
        echo "[+] Zipping engagement files..."
        (cd "$output_dir" && sudo zip -qr "$zip_file" .) && \
        echo "[+] Backup created: $zip_file" || \
        echo "[!] Zip failed"
    fi
    
    # remove output dir
    echo "[+] Cleaning up engagement directory..."
    sudo rm -rf "$output_dir" && \
    echo "[+] Cleanup complete" || \
    echo "[!] Cleanup failed"
    sleep 2
    clear
}

### Error Handling on load 
if [ $# -eq 0 ]; then
    echo -e "\033[33mNo engagement name specified\033[0m"
    read -p "Please enter engagement name (or Ctrl+C to cancel): " engagement_name
    if [ -z "$engagement_name" ]; then
        echo -e "\033[31mError: No name provided\033[0m" >&2
        exit 1
    fi
    kryten "$engagement_name"
else
    kryten "$@"
fi